<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
  <!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。
        还有重要的就是我们要生成的实体类所对应的的表或者试图 -->
<generatorConfiguration> 
   <properties resource="config/database.properties" />
    <context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional">
        <!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,
                javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,
                javaClientGenerator?,table+ -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
      
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="true" />
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="" value=""/>
            <property name="constructorBased" value="false"/>
            <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
            <property name="javaFileEncoding" value="UTF-8"/>
            <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
            
        </commentGenerator>
        <!-- 数据库连接 -->
        <jdbcConnection 
            driverClass="${db.druid.driverClassName}" 
            connectionURL="${db.druid.url}"
            userId="${db.druid.username}" 
            password="${db.druid.password}">
        </jdbcConnection>
        <!-- 指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="cn.mldn.ssm.dao.table.entity" targetProject="mldnmybatis-ssm">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--对应的xml mapper文件  -->
        <sqlMapGenerator targetPackage="cn.mldn.ssm.dao.table.mapper" targetProject="mldnmybatis-ssm" >
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator> 
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="cn.mldn.ssm.dao.table.mapper" targetProject="mldnmybatis-ssm" >
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 表名对应生成的实体 -->      
        <!-- enableCountByExample="false" enableUpdateByExample="false"
        enableDeleteByExample="false" enableSelectByExample="false"
        selectByExampleQueryId="false" -->
        <table tableName="dept" domainObjectName=""
        enableCountByExample="false" enableUpdateByExample="false"
        enableDeleteByExample="false" enableSelectByExample="false"
        selectByExampleQueryId="false">
        <generatedKey column="deptId" sqlStatement="MySql" identity="true"/>
        </table> 
    </context>
</generatorConfiguration>